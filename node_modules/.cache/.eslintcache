[{"/Users/justinas/Documents/repos/teamProject/web/frontend/src/index.js":"1","/Users/justinas/Documents/repos/teamProject/web/frontend/src/App.js":"2","/Users/justinas/Documents/repos/teamProject/web/frontend/src/context.js":"3","/Users/justinas/Documents/repos/teamProject/web/frontend/src/Components/MainSections/Header.jsx":"4","/Users/justinas/Documents/repos/teamProject/web/frontend/src/Components/Authentication/Authentication.jsx":"5","/Users/justinas/Documents/repos/teamProject/web/frontend/src/Components/MainSections/Content.jsx":"6","/Users/justinas/Documents/repos/teamProject/web/frontend/src/Components/ScrapeTwitter.jsx":"7","/Users/justinas/Documents/repos/teamProject/web/frontend/src/Components/Authentication/Signup.jsx":"8","/Users/justinas/Documents/repos/teamProject/web/frontend/src/Components/Authentication/Login.jsx":"9","/Users/justinas/Documents/repos/teamProject/web/frontend/src/Components/ScrapeReddit.jsx":"10","/Users/justinas/Documents/repos/teamProject/web/frontend/src/Components/MainSections/WordCloudSec.jsx":"11"},{"size":437,"mtime":1669301833561,"results":"12","hashOfConfig":"13"},{"size":927,"mtime":1670255041630,"results":"14","hashOfConfig":"13"},{"size":162,"mtime":1669301062311,"results":"15","hashOfConfig":"13"},{"size":410,"mtime":1670242068901,"results":"16","hashOfConfig":"13"},{"size":2407,"mtime":1670252510390,"results":"17","hashOfConfig":"13"},{"size":1165,"mtime":1670242418696,"results":"18","hashOfConfig":"13"},{"size":5109,"mtime":1670255362993,"results":"19","hashOfConfig":"13"},{"size":2347,"mtime":1669301062307,"results":"20","hashOfConfig":"13"},{"size":1757,"mtime":1669301062307,"results":"21","hashOfConfig":"13"},{"size":6188,"mtime":1670255335952,"results":"22","hashOfConfig":"13"},{"size":2836,"mtime":1670245503275,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"b3zxjw",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},"/Users/justinas/Documents/repos/teamProject/web/frontend/src/index.js",[],[],"/Users/justinas/Documents/repos/teamProject/web/frontend/src/App.js",["66","67"],[],"import { useEffect, useState } from \"react\";\nimport Authentication from \"./Components/Authentication/Authentication\";\n\nimport MyContext from \"./context\";\n\nimport Header from \"./Components/MainSections/Header\";\nimport Content from \"./Components/MainSections/Content\";\n\nfunction App() {\n\n  const [authenticated, setAuthenticated] = useState(false);\n  const [UID, setUID] = useState('');\n\n  useEffect(()=>{\n    console.log(UID);\n  },[UID])\n\n  return (\n  <MyContext.Provider value={{UID,setUID}} >\n    <div className=\"App\">\n      {\n      !authenticated ? <Authentication props={{setAuthenticated}}/>\n      :\n      <>\n        {authenticated=='unauthenticated' ? <Header isAuthenticated={false}/> : <Header isAuthenticated={true}/>}\n\n        {authenticated=='unauthenticated' ? <Content isAuthenticated={false}/> : <Content isAuthenticated={true}/>}\n\n      </>\n      }\n    </div>\n  </MyContext.Provider>\n\n\n  );\n}\n\nexport default App;","/Users/justinas/Documents/repos/teamProject/web/frontend/src/context.js",[],[],"/Users/justinas/Documents/repos/teamProject/web/frontend/src/Components/MainSections/Header.jsx",["68"],[],"import React from 'react';\n\nfunction Header(props) {\n    return (\n        <React.Fragment>\n        <header>\n            <div className='header-content'>\n                <p className='name' style={{margin: '0'}}>Opa<img src={require('../../Photos/key.png')} style={{width: '50px', margin: '0 0 3 -10px'}}></img></p>\n            </div>\n        </header>\n        </React.Fragment>\n    );\n}\n\nexport default Header;","/Users/justinas/Documents/repos/teamProject/web/frontend/src/Components/Authentication/Authentication.jsx",["69","70","71","72"],[],"import React, { useEffect, useState } from 'react';\n\nimport Login from './Login';\nimport Signup from './Signup';\n\nfunction Authentication(props) {\n\n    const [authButton, setAuthButton] = useState('default');\n\n    return (\n        <div className='authentication'>\n            <div className='bubble1'></div>\n            <div className='bubble2'></div>\n            <div className='bubble3'></div>\n            <div className='bubble4'></div>\n\n            <div className='auth-left'>\n                <p className='name'>Opa<img src={require('../../Photos/key.png')}></img></p>\n                <p className='auth-mainText'>Find the latest news in glimpse of an eye</p>\n                <button onClick={()=>{props.props.setAuthenticated('unauthenticated')}} className='unauthenticatedBtn'>Use without an account</button>\n                <div className='seperator'></div>\n                <div className='auth-icons'>\n                    <img src={require('../../Photos/twitterIcon.png')} alt='twitter logo' className='twitter-img'></img>\n                    <img src={require('../../Photos/redditIcon.png')} alt='reddit logo' className='reddit-img'></img>\n                </div>\n                \n            </div>\n            <div className='auth-right'>\n                <div className='auth-inputs-holder'>\n                    {\n                    authButton==\"default\" ? \n                    \n                    <> <button onClick={()=>{setAuthButton('login')}} className='signin-btn'>Sign in to your account</button>\n                    <div className='auth-seperation'>\n                        <div className='dash'></div>\n                        <p style={{fontSize: '1.5rem'}}>or</p>\n                        <div className='dash'></div>\n                    </div>\n                    <div className='signup'><button onClick={()=>{setAuthButton('signup')}} className='signup-btn'>Create a new account</button></div> </> \n                    :\n                    <> {\n                        authButton=='login' ?\n                        <Login authState={{setAuthButton}} setAuthenticated={props.props.setAuthenticated}/>\n                        :\n                        <Signup authState={{setAuthButton}} setAuthenticated={props.props.setAuthenticated}/>\n                    } </>\n                    }\n\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Authentication;","/Users/justinas/Documents/repos/teamProject/web/frontend/src/Components/MainSections/Content.jsx",["73","74","75"],[],"import React from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nimport ScrapeReddit from '../ScrapeReddit';\nimport ScrapeTwitter from '../ScrapeTwitter';\n\nfunction Content(props) {\n\n    const [whatToScrape, setWhatToScrape] = useState('');\n\n\n    return (\n        <main>\n            {whatToScrape=='' ?\n                <>\n                    <img src={require('../../Photos/twitterIcon.png')} alt='user icon' className='twitterIcon-main' onClick={()=>{setWhatToScrape('twitter')}}></img>\n                    <img src={require('../../Photos/redditIcon.png')} alt='user icon' className='redditIcon-main' onClick={()=>{setWhatToScrape('reddit')}}></img>\n                    <h1 style={{margin:'15px 10px 300px 10px', textAlign:'center'}}>Choose the platfrom you want to scrape information from</h1>\n                </>\n                :\n                <>\n                {whatToScrape=='reddit' ? \n                <ScrapeReddit setWhatToScrape={setWhatToScrape}/>\n                : <ScrapeTwitter setWhatToScrape={setWhatToScrape}/>\n                }\n                </>\n            }\n\n        </main>\n    );\n}\n\nexport default Content;","/Users/justinas/Documents/repos/teamProject/web/frontend/src/Components/ScrapeTwitter.jsx",["76","77","78","79","80","81","82","83","84","85","86","87","88","89"],[],"import React from 'react';\nimport { useEffect } from 'react';\nimport { useContext } from 'react';\nimport { useState } from 'react';\nimport { useRef } from 'react';\nimport MyContext from '../context';\nimport WordCloudSec from './MainSections/WordCloudSec';\n\nfunction ScrapeTwitter(props) {\n    const { UID } = useContext(MyContext);\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [wordCloud, activateWordCloud] = useState(false);\n\n    const [scrapeResults, setScrapeResults] = useState([]);\n\n    const textInputRef = useRef();\n    const resFreqRef = useRef();\n    const scrapeBtnRef = useRef();\n    let previousText = useRef('TEMPLATE MESSAGE');\n    function scrape(){\n        const text = textInputRef.current.value;\n        let freq = resFreqRef.current.value;\n        if(freq == '')freq = 100;\n        if(freq != '' && isNaN(freq)){\n            setError('Word quantity must be a number')\n            return;\n        }\n        if(freq != '' && freq < 100){\n            setError('Word frequency must be greater than 100')\n            return;\n        }\n        if(freq != '' && freq > 1000){\n            setError(`Word frequency can't be larger then 1000`)\n        }\n        if(text==previousText.current){\n            setError('Type a different word/phrase');\n            return;\n        } else if(text==''){\n            setError(`Input field can't be empty`);\n            return;\n        }\n        previousText.current = text;\n        setLoading(true);\n\n        let xhr = new XMLHttpRequest();\n        xhr.open('POST','http://localhost:8080/twitterScrapping', true);\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(JSON.stringify({\n            text: text,\n            freq: freq\n        }));\n        xhr.onload = ()=>{\n            console.log(xhr.responseText)\n            setLoading(false);\n            const response = xhr.responseText.slice(2, xhr.responseText.length - 4);\n            const temp_all = response.split('(');\n            const cleanerTemp = temp_all.map(res => {\n                return res.slice(0, res.indexOf(')'))\n            })\n            cleanerTemp.shift();\n            const temp_seperatedFrequancyAndWords = cleanerTemp.map(elem=>{\n                return elem.split(',');\n            })\n\n            const final = temp_seperatedFrequancyAndWords.map(elem=>{\n                return elem.map(innerElem=>{\n                    return (innerElem.replaceAll(' ', '')).replaceAll(`'`,'');\n                })\n            })\n            console.log(final);\n            setScrapeResults(final);\n        }\n    }\n    \n    useEffect(()=>{\n        if(error!==null){\n            setTimeout(() => {\n                setError(null);\n            }, 2000);\n        }\n    },[error])\n\n    useEffect(()=>{\n        if(loading==true){\n            scrapeBtnRef.current.classList.add('button-disabled');\n        }\n        if(loading==false && scrapeBtnRef.current.classList.contains('button-disabled')){\n            activateWordCloud(false);\n            scrapeBtnRef.current.classList.remove('button-disabled');\n        }\n    },[loading])\n\n    return (\n        <div className='scrapeTwitter'>\n            <h4 style={{fontSize:'2rem',margin:'0'}}>Twitter scrapping</h4>\n            <p className='errorMsg'>{error}</p>\n            <div className='inputs'>\n                <input className='main-text-input' placeholder='Your word' ref={textInputRef}></input>\n                <input className='main-text-input' placeholder='Word qty.' ref={resFreqRef}></input>\n            </div>\n            {wordCloud == false ?\n            <div className='input-results'>\n                    <ul>\n                        <li>Word</li>\n                        <li>Frequency</li>\n                    </ul>\n                <div className='input-innerResults'>\n                    {scrapeResults.map((singleField,index)=>{\n                        if(isNaN(singleField[1]))return;\n                        return(\n                            <ul className='reddit-ul' key={index}>\n                                <li>{singleField[0]}</li>\n                                <li>{singleField[1]}</li>\n                            </ul>\n                        )\n                    })}\n                </div>\n            </div>\n            : \n            <WordCloudSec array={scrapeResults} goBack={activateWordCloud}/>\n            }\n            <div className='input-buttons'>\n                <button onClick={()=>{scrape()}} ref={scrapeBtnRef}>{loading==true ? <div className=\"lds-dual-ring\"></div> : <p style={{margin:'0'}}>Scrape</p>}</button>\n                <button onClick={()=>{if(scrapeResults.length == 0){setError('First, enter a word/phrase to scrape'); return};if(UID == ''){setError('You need to log in in order to see the detailed view');return;} activateWordCloud(true)}}>Detailed view</button>\n            </div>\n            <button className='goBack-btn' onClick={()=>{if(wordCloud == true){activateWordCloud(false); return}props.setWhatToScrape('')}}>Go back</button>\n        </div>\n    );\n}\n\nexport default ScrapeTwitter;","/Users/justinas/Documents/repos/teamProject/web/frontend/src/Components/Authentication/Signup.jsx",["90"],[],"import React, { useState, useContext } from 'react';\n\nimport MyContext from '../../context';\n\nfunction Signup(props) {\n\n    const [authErrorMsg, setAuthErrorMsg] = useState('');\n\n    const { UID, setUID } = useContext(MyContext);\n\n    async function checkSubmit(e){\n        console.log(props)\n\n        e.preventDefault();\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", 'http://localhost:8080/signup', true);\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(JSON.stringify({\n            email: e.currentTarget.email.value,\n            emailR: e.currentTarget.emailR.value,\n            password: e.currentTarget.password.value,\n            passwordR: e.currentTarget.passwordR.value\n        }));\n\n        xhr.onload = ()=>{\n            const parsedResponse = JSON.parse(xhr.responseText);\n            console.log(parsedResponse)\n            if(parsedResponse.UID){\n                setUID(parsedResponse.UID);\n                props.setAuthenticated(true);\n            } else {\n                setAuthErrorMsg(parsedResponse);\n            }\n        }\n    }\n\n    return (\n        <div className='signup-component'>\n            <form onSubmit={(e)=>{checkSubmit(e)}}>\n                <p>Fill in the form</p>\n                <div className='signup-component-emailDiv'>\n                    <label htmlFor='email'>Email:</label>\n                    <input id='email' name='email'></input>\n                    <label htmlFor='emailR'>Repeat email:</label>\n                    <input id='emailR' name='emailR'></input>\n                </div>\n                <div className='signup-component-passwordDiv'>\n                    <label htmlFor='password' typeof='password'>Password:</label>\n                    <input id='password' name='password' type='password'></input>\n                    <label htmlFor='passwordR' typeof='password'>Repeat password:</label>\n                    <input id='passwordR' name='passwordR' type='password'></input>\n                </div>\n                <p className='auth-component-errorMsg'>{authErrorMsg}</p>\n                <button className='button'>Sign up</button>\n                <button className='auth-goBack-btn' type='button' onClick={()=>{props.authState.setAuthButton('default')}}>Go back</button>\n            </form>\n        </div>\n    );\n}\nexport default Signup;","/Users/justinas/Documents/repos/teamProject/web/frontend/src/Components/Authentication/Login.jsx",["91","92"],[],"import React, { useContext, useEffect } from 'react';\nimport { useState } from 'react';\n\nimport MyContext from '../../context';\n\nfunction Login(props){\n    \n    const [authErrorMsg, setAuthErrorMsg] = useState('');\n\n    const { UID, setUID } = useContext(MyContext);\n    \n    function submitForm(e){\n        e.preventDefault();\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", 'http://localhost:8080/login', true);\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(JSON.stringify({\n            email: e.currentTarget.email.value,\n            password: e.currentTarget.password.value\n        }));\n\n        xhr.onload = ()=>{\n            const parsedResponse = JSON.parse(xhr.responseText);\n            if(parsedResponse.UID){\n                setUID(parsedResponse.UID);\n                props.setAuthenticated(true);\n            } else {\n                setAuthErrorMsg(xhr.responseText);\n            }\n        }\n    }\n\n    return (\n        <div className='login-component'>\n        <form onSubmit={(e)=>{submitForm(e)}}>\n            <p>Sign in to your account</p>\n            <div className='login-comoponent-inputHolder'>\n                <label htmlFor='email'>Email:</label>\n                <input id='email' name='email'></input>\n                <label htmlFor='password'>Password:</label>\n                <input id='password' name='password' type='password'></input>\n            </div>\n            <p className='auth-component-errorMsg'>{authErrorMsg}</p>\n            <button className='button'>Log in</button>\n            <button className='auth-goBack-btn' type='button' onClick={()=>{props.authState.setAuthButton('default')}}>Go back</button>\n        </form>\n    </div>\n    );\n}\n\nexport default Login;","/Users/justinas/Documents/repos/teamProject/web/frontend/src/Components/ScrapeReddit.jsx",["93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110"],[],"import React from 'react';\nimport { useEffect } from 'react';\nimport { useContext } from 'react';\nimport { useState } from 'react';\nimport { useRef } from 'react';\nimport MyContext from '../context';\nimport WordCloudSec from './MainSections/WordCloudSec';\n\nfunction ScrapeReddit(props) {\n    const { UID } = useContext(MyContext);\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [wordCloud, activateWordCloud] = useState(false);\n\n    const [scrapeResults, setScrapeResults] = useState([]);\n\n    const textInputRef = useRef();\n    const resFreqRef = useRef();\n\n    const scrapeBtnRef = useRef();\n    let previousText = useRef('TEMPLATE MESSAGE');\n    function scrape(){\n\n        const text = textInputRef.current.value;\n        let freq = resFreqRef.current.value;\n        if(freq == '')freq = 100;\n        if(freq != '' && isNaN(freq)){\n            setError('Result quantity must be a number')\n            return;\n        }\n        if(freq != '' && freq < 100){\n            setError('Word frequency must be greater than 100')\n            return;\n        }\n        if(freq != '' && freq > 1000){\n            setError(`Word frequency can't be larger then 1000`)\n        }\n        if(text==previousText.current){\n            setError('Type a different word/phrase');\n            return;\n        } else if(text==''){\n            setError(`Input field can't be empty`);\n            return;\n        }\n        previousText.current = text;\n        setLoading(true);\n\n        let xhr = new XMLHttpRequest();\n        xhr.open('POST','http://localhost:8080/redditScrapping', true);\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(JSON.stringify({\n            text: text,\n            freq: freq\n        }));\n        xhr.onload = ()=>{\n            setLoading(false);\n            const response = JSON.parse(xhr.responseText);\n            if(response.error){\n                setError(response.error);\n            } else if(response.scrappingErr){\n                setError('Uncaught error. Please retry the search')\n            } else {\n                // the response from python is in string format - it needs to be cleaned up and put in arrays properly\n\n                // splits the response string into an array, but the arrays have \"), \" at the end\n                // the temp array consists of strings, that contain both the word and the frequancy of the word\n                const temp = xhr.responseText.split('(');\n\n                // cleanerTemp consists of array of strings without the closing bracket\n                const cleanerTemp = temp.map(element=>{\n                    return element.slice(0,element.indexOf(')'));\n                })\n\n                // evenMoreCleanerTemp is the array, that consists of arrays that in the [0] index have the word, and at [1] have the frequancy\n                const evenMoreCleanerTemp = cleanerTemp.map(element=>{\n                    return element.split(', ')\n                })\n\n                // finalArray is like evenMoreCleanerTemp, but without the unnecessary paranthases in [0]\n                setScrapeResults(evenMoreCleanerTemp.map(element=>{\n                    const temporary = [element[0].replaceAll(`'`,''), parseFloat(element[1])]\n                    return temporary;\n                }))\n            }\n        }\n    }\n    useEffect(()=>{\n        if(error!==null){\n            setTimeout(() => {\n                setError(null);\n            }, 2000);\n        }\n    },[error])\n\n    useEffect(()=>{\n        if(loading==true){\n            scrapeBtnRef.current.classList.add('button-disabled');\n        }\n        if(loading==false && scrapeBtnRef.current.classList.contains('button-disabled')){\n            activateWordCloud(false);\n            scrapeBtnRef.current.classList.remove('button-disabled');\n        }\n    },[loading])\n\n    return (\n        <div className='scrapeReddit'>\n            <h4 style={{fontSize:'2rem',margin:'0'}}>Reddit scrapping</h4>\n            <p className='errorMsg'>{error}</p>\n            <div className='inputs'>\n                <input className='main-text-input' placeholder='Your word' ref={textInputRef}></input>\n                <input className='main-text-input' placeholder='Word qty.' ref={resFreqRef}></input>\n            </div> \n            {wordCloud == false ?\n            <div className='input-results'>\n                <ul>\n                    <li>Word</li>\n                    <li>Frequency</li>\n                </ul>\n                <div className='input-innerResults'>\n                    {scrapeResults.map((singleField,index)=>{\n                        console.log(singleField)\n                        if(scrapeResults.length == 1 && isNaN(singleField[1])){\n                            return <div className='no-results' key={index}>No results found</div>\n                        }\n                        if(singleField[0] == '&#X200B;' || singleField[0] == '\\\\u200b')return;\n                        if(isNaN(singleField[1]))return;\n                        return(\n                            <ul className='reddit-ul' key={index}>\n                                <li>{singleField[0]}</li>\n                                <li>{singleField[1]}</li>\n                            </ul>\n                        )\n                    })}\n                </div>\n            </div>\n            : \n                <WordCloudSec array={scrapeResults} goBack={activateWordCloud}/>\n            }\n\n            <div className='input-buttons'>\n                <button onClick={()=>{scrape()}} ref={scrapeBtnRef}>{loading==true ? <div className=\"lds-dual-ring\"></div> : <p style={{margin:'0'}}>Scrape</p>}</button>\n                <button onClick={()=>{if(scrapeResults.length == 0){setError('First, enter a word/phrase to scrape'); return}; if(UID == ''){setError('You need to log in in order to see the detailed view');return;}activateWordCloud(true)}}>Detailed view</button>\n            </div>\n            <button className='goBack-btn' onClick={()=>{if(wordCloud == true){activateWordCloud(false); return}props.setWhatToScrape('')}}>Go back</button>\n        </div>\n    );\n}\n\nexport default ScrapeReddit;","/Users/justinas/Documents/repos/teamProject/web/frontend/src/Components/MainSections/WordCloudSec.jsx",["111","112"],[],"import React from 'react';\nimport * as d3 from \"d3\";\nimport * as cloud from 'd3-cloud';\nimport { useEffect } from 'react';\n\nfunction WordCloudSec(props) {\n    useEffect(()=>{\n        const spalvos = [\"#1E90FF\", \"#191970\", \"#000000\", \"#D2691E\", \"#DC143C\", \"#2F4F4F\", \"#9400D3\", \"#B22222\", \"#4B0082\", \"#808000\"];\n        // Cloudo dimensionai\n        const margin = {top: 0, right: 0, bottom: 0, left: 0},\n            width = 0.72*window.innerWidth - margin.left - margin.right,\n            height = 0.45*window.innerHeight - margin.top - margin.bottom;\n        \n        // append the svg object to the body of the page (karoce be sito neveiks XDDD)\n        const svg = d3.select(\"#burbulas\").append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n\n        .append(\"g\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\")\n            \n        let sizeMultiplier = 1;\n        //Pacio layouto kurimas    \n        const layout = cloud()\n        .size([width, height])\n        .words(props.array.map((d,index)=>{if(index==1){if(parseFloat(d[1]) < 20){sizeMultiplier = 3}else if(parseFloat(d[1]) < 50){sizeMultiplier = 2}else if(parseFloat(d[1]) > 200){sizeMultiplier = 0.7}else{sizeMultiplier = 1}}; return {text: d[0], size: d[1]}}))\n        .padding(4)        //Tarpas tarp zodziu\n        .rotate(315)       // Zodziu pasisukimas, jis yra random galima padaryt ji vienoda\n        .fontSize(function(d) { return d.size * sizeMultiplier; })      // zodziu dydis pagal turimus skaicius, kadangi fonto dydis atitinka frequency\n                                                        //tai galima dalint is skaiciaus arba kazkaip suzaist su skaiciais\n        .on(\"end\", draw);\n        layout.start();\n        \n        //Layouto atvaizdavimas\n        function draw(words) {\n        svg\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + layout.size()[0] / 2 + \",\" + layout.size()[1] / 2 + \")\")\n            .selectAll(\"text\")\n                .data(words)\n            .enter().append(\"text\")\n                .style(\"font-size\", function(d) { return d.size; }) //atitinkamai reiks ir cia pakeist kadangi sitas dalykas actually piesia \n                .style(\"fill\", spalvos[Math.floor(Math.random() * 10)]) //spalvos \n                .attr(\"text-anchor\", \"middle\")\n                .style(\"font-family\", \"Impact\")\n                .attr(\"transform\", function(d) {\n                return \"translate(\" + [d.x, d.y] + \")rotate(\" + d.rotate + \")\";\n                })\n                .text(function(d) { return d.text; });\n        }\n    },[])\n\n    return (\n        <div id='burbulas'>\n        </div>\n    );\n}\n\nexport default WordCloudSec;",{"ruleId":"113","severity":1,"message":"114","line":25,"column":23,"nodeType":"115","messageId":"116","endLine":25,"endColumn":25},{"ruleId":"113","severity":1,"message":"114","line":27,"column":23,"nodeType":"115","messageId":"116","endLine":27,"endColumn":25},{"ruleId":"117","severity":1,"message":"118","line":8,"column":62,"nodeType":"119","endLine":8,"endColumn":152},{"ruleId":"120","severity":1,"message":"121","line":1,"column":17,"nodeType":"122","messageId":"123","endLine":1,"endColumn":26},{"ruleId":"117","severity":1,"message":"118","line":18,"column":40,"nodeType":"119","endLine":18,"endColumn":83},{"ruleId":"113","severity":1,"message":"114","line":31,"column":31,"nodeType":"115","messageId":"116","endLine":31,"endColumn":33},{"ruleId":"113","severity":1,"message":"114","line":42,"column":35,"nodeType":"115","messageId":"116","endLine":42,"endColumn":37},{"ruleId":"120","severity":1,"message":"121","line":3,"column":10,"nodeType":"122","messageId":"123","endLine":3,"endColumn":19},{"ruleId":"113","severity":1,"message":"114","line":15,"column":26,"nodeType":"115","messageId":"116","endLine":15,"endColumn":28},{"ruleId":"113","severity":1,"message":"114","line":23,"column":30,"nodeType":"115","messageId":"116","endLine":23,"endColumn":32},{"ruleId":"113","severity":1,"message":"114","line":24,"column":17,"nodeType":"115","messageId":"116","endLine":24,"endColumn":19},{"ruleId":"113","severity":1,"message":"124","line":25,"column":17,"nodeType":"115","messageId":"116","endLine":25,"endColumn":19},{"ruleId":"113","severity":1,"message":"124","line":29,"column":17,"nodeType":"115","messageId":"116","endLine":29,"endColumn":19},{"ruleId":"113","severity":1,"message":"124","line":33,"column":17,"nodeType":"115","messageId":"116","endLine":33,"endColumn":19},{"ruleId":"113","severity":1,"message":"114","line":36,"column":16,"nodeType":"115","messageId":"116","endLine":36,"endColumn":18},{"ruleId":"113","severity":1,"message":"114","line":39,"column":23,"nodeType":"115","messageId":"116","endLine":39,"endColumn":25},{"ruleId":"113","severity":1,"message":"114","line":85,"column":19,"nodeType":"115","messageId":"116","endLine":85,"endColumn":21},{"ruleId":"113","severity":1,"message":"114","line":88,"column":19,"nodeType":"115","messageId":"116","endLine":88,"endColumn":21},{"ruleId":"113","severity":1,"message":"114","line":102,"column":24,"nodeType":"115","messageId":"116","endLine":102,"endColumn":26},{"ruleId":"125","severity":1,"message":"126","line":110,"column":50,"nodeType":"127","messageId":"128","endLine":110,"endColumn":57},{"ruleId":"113","severity":1,"message":"114","line":124,"column":77,"nodeType":"115","messageId":"116","endLine":124,"endColumn":79},{"ruleId":"113","severity":1,"message":"114","line":125,"column":63,"nodeType":"115","messageId":"116","endLine":125,"endColumn":65},{"ruleId":"113","severity":1,"message":"114","line":125,"column":134,"nodeType":"115","messageId":"116","endLine":125,"endColumn":136},{"ruleId":"113","severity":1,"message":"114","line":127,"column":71,"nodeType":"115","messageId":"116","endLine":127,"endColumn":73},{"ruleId":"120","severity":1,"message":"129","line":9,"column":13,"nodeType":"122","messageId":"123","endLine":9,"endColumn":16},{"ruleId":"120","severity":1,"message":"121","line":1,"column":29,"nodeType":"122","messageId":"123","endLine":1,"endColumn":38},{"ruleId":"120","severity":1,"message":"129","line":10,"column":13,"nodeType":"122","messageId":"123","endLine":10,"endColumn":16},{"ruleId":"113","severity":1,"message":"114","line":26,"column":17,"nodeType":"115","messageId":"116","endLine":26,"endColumn":19},{"ruleId":"113","severity":1,"message":"124","line":27,"column":17,"nodeType":"115","messageId":"116","endLine":27,"endColumn":19},{"ruleId":"113","severity":1,"message":"124","line":31,"column":17,"nodeType":"115","messageId":"116","endLine":31,"endColumn":19},{"ruleId":"113","severity":1,"message":"124","line":35,"column":17,"nodeType":"115","messageId":"116","endLine":35,"endColumn":19},{"ruleId":"113","severity":1,"message":"114","line":38,"column":16,"nodeType":"115","messageId":"116","endLine":38,"endColumn":18},{"ruleId":"113","severity":1,"message":"114","line":41,"column":23,"nodeType":"115","messageId":"116","endLine":41,"endColumn":25},{"ruleId":"113","severity":1,"message":"114","line":96,"column":19,"nodeType":"115","messageId":"116","endLine":96,"endColumn":21},{"ruleId":"113","severity":1,"message":"114","line":99,"column":19,"nodeType":"115","messageId":"116","endLine":99,"endColumn":21},{"ruleId":"113","severity":1,"message":"114","line":113,"column":24,"nodeType":"115","messageId":"116","endLine":113,"endColumn":26},{"ruleId":"113","severity":1,"message":"114","line":122,"column":49,"nodeType":"115","messageId":"116","endLine":122,"endColumn":51},{"ruleId":"113","severity":1,"message":"114","line":125,"column":43,"nodeType":"115","messageId":"116","endLine":125,"endColumn":45},{"ruleId":"113","severity":1,"message":"114","line":125,"column":75,"nodeType":"115","messageId":"116","endLine":125,"endColumn":77},{"ruleId":"125","severity":1,"message":"126","line":125,"column":88,"nodeType":"127","messageId":"128","endLine":125,"endColumn":95},{"ruleId":"125","severity":1,"message":"126","line":126,"column":50,"nodeType":"127","messageId":"128","endLine":126,"endColumn":57},{"ruleId":"113","severity":1,"message":"114","line":141,"column":77,"nodeType":"115","messageId":"116","endLine":141,"endColumn":79},{"ruleId":"113","severity":1,"message":"114","line":142,"column":63,"nodeType":"115","messageId":"116","endLine":142,"endColumn":65},{"ruleId":"113","severity":1,"message":"114","line":142,"column":135,"nodeType":"115","messageId":"116","endLine":142,"endColumn":137},{"ruleId":"113","severity":1,"message":"114","line":144,"column":71,"nodeType":"115","messageId":"116","endLine":144,"endColumn":73},{"ruleId":"113","severity":1,"message":"114","line":28,"column":52,"nodeType":"115","messageId":"116","endLine":28,"endColumn":54},{"ruleId":"130","severity":1,"message":"131","line":53,"column":7,"nodeType":"132","endLine":53,"endColumn":9,"suggestions":"133"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","Expected '!==' and instead saw '!='.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'UID' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.array'. Either include it or remove the dependency array.","ArrayExpression",["134"],{"desc":"135","fix":"136"},"Update the dependencies array to be: [props.array]",{"range":"137","text":"138"},[2737,2739],"[props.array]"]