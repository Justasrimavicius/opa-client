{"ast":null,"code":"var _jsxFileName = \"/Users/justinas/Documents/repos/teamProject/web/frontend/src/Components/ScrapeReddit.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useContext } from 'react';\nimport { useState } from 'react';\nimport { useRef } from 'react';\nimport MyContext from '../context';\nimport WordCloudSec from './MainSections/WordCloudSec';\nimport link from '../link';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ScrapeReddit(props) {\n  _s();\n  const {\n    UID\n  } = useContext(MyContext);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [wordCloud, activateWordCloud] = useState(false);\n  const [scrapeResults, setScrapeResults] = useState([]);\n  const textInputRef = useRef();\n  const resFreqRef = useRef();\n  const scrapeBtnRef = useRef();\n  let previousText = useRef('TEMPLATE MESSAGE');\n  function scrape() {\n    const text = textInputRef.current.value;\n    let freq = resFreqRef.current.value;\n    if (freq == '') freq = 100;\n    if (freq != '' && isNaN(freq)) {\n      setError('Result quantity must be a number');\n      return;\n    }\n    if (freq != '' && freq < 100) {\n      setError('Word frequency must be greater than 100');\n      return;\n    }\n    if (freq != '' && freq > 1000) {\n      setError(`Word frequency can't be larger then 1000`);\n      return;\n    }\n    if (text == previousText.current) {\n      setError('Type a different word/phrase');\n      return;\n    } else if (text == '') {\n      setError(`Input field can't be empty`);\n      return;\n    }\n    previousText.current = text;\n    setLoading(true);\n    let xhr = new XMLHttpRequest();\n    xhr.open('POST', `${link}/redditScrapping`, true);\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    xhr.send(JSON.stringify({\n      text: text,\n      freq: freq\n    }));\n    xhr.onload = () => {\n      setLoading(false);\n      const response = JSON.parse(xhr.responseText);\n      if (response.error) {\n        setError(response.error);\n      } else if (response.scrappingErr) {\n        setError('Uncaught error. Please retry the search');\n      } else {\n        // the response from python is in string format - it needs to be cleaned up and put in arrays properly\n\n        // splits the response string into an array, but the arrays have \"), \" at the end\n        // the temp array consists of strings, that contain both the word and the frequancy of the word\n        const temp = xhr.responseText.split('(');\n\n        // cleanerTemp consists of array of strings without the closing bracket\n        const cleanerTemp = temp.map(element => {\n          return element.slice(0, element.indexOf(')'));\n        });\n\n        // evenMoreCleanerTemp is the array, that consists of arrays that in the [0] index have the word, and at [1] have the frequancy\n        const evenMoreCleanerTemp = cleanerTemp.map(element => {\n          return element.split(', ');\n        });\n\n        // finalArray is like evenMoreCleanerTemp, but without the unnecessary paranthases in [0]\n        setScrapeResults(evenMoreCleanerTemp.map(element => {\n          const temporary = [element[0].replaceAll(`'`, ''), parseFloat(element[1])];\n          return temporary;\n        }));\n      }\n    };\n  }\n  useEffect(() => {\n    if (error !== null) {\n      setTimeout(() => {\n        setError(null);\n      }, 2000);\n    }\n  }, [error]);\n  useEffect(() => {\n    if (loading == true) {\n      scrapeBtnRef.current.classList.add('button-disabled');\n    }\n    if (loading == false && scrapeBtnRef.current.classList.contains('button-disabled')) {\n      activateWordCloud(false);\n      scrapeBtnRef.current.classList.remove('button-disabled');\n    }\n  }, [loading]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scrapeReddit\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        fontSize: '2rem',\n        margin: '0'\n      },\n      children: \"Reddit scraping\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"errorMsg\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputs\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"main-text-input\",\n        placeholder: \"Your word\",\n        ref: textInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"main-text-input\",\n        placeholder: \"Word qty.\",\n        ref: resFreqRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), wordCloud == false ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Frequency\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-innerResults\",\n        children: scrapeResults.map((singleField, index) => {\n          if (scrapeResults.length == 1 && isNaN(singleField[1])) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"no-results\",\n              children: \"No results found\"\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 36\n            }, this);\n          }\n          if (singleField[0] == '&#X200B;' || singleField[0] == '\\\\u200b') return;\n          console.log(singleField[0]);\n          singleField[0].replaceAll('/', '');\n          singleField[0].replaceAll('\"', '');\n          console.log(singleField[0]);\n          if (isNaN(singleField[1])) return;\n          return /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"reddit-ul\",\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: singleField[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: singleField[1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(WordCloudSec, {\n      array: scrapeResults,\n      goBack: activateWordCloud\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          scrape();\n        },\n        ref: scrapeBtnRef,\n        children: loading == true ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lds-dual-ring\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 86\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            margin: '0'\n          },\n          children: \"Scrape\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 126\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          if (scrapeResults.length == 0) {\n            setError('First, enter a word/phrase to scrape');\n            return;\n          }\n          ;\n          if (UID == '') {\n            setError('You need to log in in order to see the word cloud');\n            return;\n          }\n          activateWordCloud(true);\n        },\n        children: \"View word cloud\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"goBack-btn\",\n      onClick: () => {\n        if (wordCloud == true) {\n          activateWordCloud(false);\n          return;\n        }\n        props.setWhatToScrape('');\n      },\n      children: \"Go back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n_s(ScrapeReddit, \"zhnTyQju6BpxfVOuAKscKZ8TciY=\");\n_c = ScrapeReddit;\nexport default ScrapeReddit;\nvar _c;\n$RefreshReg$(_c, \"ScrapeReddit\");","map":{"version":3,"names":["React","useEffect","useContext","useState","useRef","MyContext","WordCloudSec","link","ScrapeReddit","props","UID","error","setError","loading","setLoading","wordCloud","activateWordCloud","scrapeResults","setScrapeResults","textInputRef","resFreqRef","scrapeBtnRef","previousText","scrape","text","current","value","freq","isNaN","xhr","XMLHttpRequest","open","setRequestHeader","send","JSON","stringify","onload","response","parse","responseText","scrappingErr","temp","split","cleanerTemp","map","element","slice","indexOf","evenMoreCleanerTemp","temporary","replaceAll","parseFloat","setTimeout","classList","add","contains","remove","fontSize","margin","singleField","index","length","console","log","setWhatToScrape"],"sources":["/Users/justinas/Documents/repos/teamProject/web/frontend/src/Components/ScrapeReddit.jsx"],"sourcesContent":["import React from 'react';\nimport { useEffect } from 'react';\nimport { useContext } from 'react';\nimport { useState } from 'react';\nimport { useRef } from 'react';\nimport MyContext from '../context';\nimport WordCloudSec from './MainSections/WordCloudSec';\n\nimport link from '../link';\n\nfunction ScrapeReddit(props) {\n    const { UID } = useContext(MyContext);\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [wordCloud, activateWordCloud] = useState(false);\n\n    const [scrapeResults, setScrapeResults] = useState([]);\n\n    const textInputRef = useRef();\n    const resFreqRef = useRef();\n\n    const scrapeBtnRef = useRef();\n    let previousText = useRef('TEMPLATE MESSAGE');\n    function scrape(){\n\n        const text = textInputRef.current.value;\n        let freq = resFreqRef.current.value;\n        if(freq == '')freq = 100;\n        if(freq != '' && isNaN(freq)){\n            setError('Result quantity must be a number')\n            return;\n        }\n        if(freq != '' && freq < 100){\n            setError('Word frequency must be greater than 100')\n            return;\n        }\n        if(freq != '' && freq > 1000){\n            setError(`Word frequency can't be larger then 1000`)\n            return;\n        }\n        if(text==previousText.current){\n            setError('Type a different word/phrase');\n            return;\n        } else if(text==''){\n            setError(`Input field can't be empty`);\n            return;\n        }\n        previousText.current = text;\n        setLoading(true);\n\n        let xhr = new XMLHttpRequest();\n        xhr.open('POST',`${link}/redditScrapping`, true);\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(JSON.stringify({\n            text: text,\n            freq: freq\n        }));\n        xhr.onload = ()=>{\n            setLoading(false);\n            const response = JSON.parse(xhr.responseText);\n            if(response.error){\n                setError(response.error);\n            } else if(response.scrappingErr){\n                setError('Uncaught error. Please retry the search')\n            } else {\n                // the response from python is in string format - it needs to be cleaned up and put in arrays properly\n\n                // splits the response string into an array, but the arrays have \"), \" at the end\n                // the temp array consists of strings, that contain both the word and the frequancy of the word\n                const temp = xhr.responseText.split('(');\n\n                // cleanerTemp consists of array of strings without the closing bracket\n                const cleanerTemp = temp.map(element=>{\n                    return element.slice(0,element.indexOf(')'));\n                })\n\n                // evenMoreCleanerTemp is the array, that consists of arrays that in the [0] index have the word, and at [1] have the frequancy\n                const evenMoreCleanerTemp = cleanerTemp.map(element=>{\n                    return element.split(', ')\n                })\n\n                // finalArray is like evenMoreCleanerTemp, but without the unnecessary paranthases in [0]\n                setScrapeResults(evenMoreCleanerTemp.map(element=>{\n                    const temporary = [element[0].replaceAll(`'`,''), parseFloat(element[1])]\n                    return temporary;\n                }))\n            }\n        }\n    }\n    useEffect(()=>{\n        if(error!==null){\n            setTimeout(() => {\n                setError(null);\n            }, 2000);\n        }\n    },[error])\n\n    useEffect(()=>{\n        if(loading==true){\n            scrapeBtnRef.current.classList.add('button-disabled');\n        }\n        if(loading==false && scrapeBtnRef.current.classList.contains('button-disabled')){\n            activateWordCloud(false);\n            scrapeBtnRef.current.classList.remove('button-disabled');\n        }\n    },[loading])\n\n    return (\n        <div className='scrapeReddit'>\n            <h4 style={{fontSize:'2rem',margin:'0'}}>Reddit scraping</h4>\n            <p className='errorMsg'>{error}</p>\n            <div className='inputs'>\n                <input className='main-text-input' placeholder='Your word' ref={textInputRef}></input>\n                <input className='main-text-input' placeholder='Word qty.' ref={resFreqRef}></input>\n            </div> \n            {wordCloud == false ?\n            <div className='input-results'>\n                <ul>\n                    <li>Word</li>\n                    <li>Frequency</li>\n                </ul>\n                <div className='input-innerResults'>\n                    {scrapeResults.map((singleField,index)=>{\n                        if(scrapeResults.length == 1 && isNaN(singleField[1])){\n                            return <div className='no-results' key={index}>No results found</div>\n                        }\n                        if(singleField[0] == '&#X200B;' || singleField[0] == '\\\\u200b')return;\n                        console.log(singleField[0])\n                        singleField[0].replaceAll('/','')\n                        singleField[0].replaceAll('\"','')\n                          console.log(singleField[0])\n                        if(isNaN(singleField[1]))return;\n                        return(\n                            <ul className='reddit-ul' key={index}>\n                                <li>{singleField[0]}</li>\n                                <li>{singleField[1]}</li>\n                            </ul>\n                        )\n                    })}\n                </div>\n            </div>\n            : \n                <WordCloudSec array={scrapeResults} goBack={activateWordCloud}/>\n            }\n\n            <div className='input-buttons'>\n                <button onClick={()=>{scrape()}} ref={scrapeBtnRef}>{loading==true ? <div className=\"lds-dual-ring\"></div> : <p style={{margin:'0'}}>Scrape</p>}</button>\n                <button onClick={()=>{if(scrapeResults.length == 0){setError('First, enter a word/phrase to scrape'); return}; if(UID == ''){setError('You need to log in in order to see the word cloud');return;}activateWordCloud(true)}}>View word cloud</button>\n            </div>\n            <button className='goBack-btn' onClick={()=>{if(wordCloud == true){activateWordCloud(false); return}props.setWhatToScrape('')}}>Go back</button>\n        </div>\n    );\n}\n\nexport default ScrapeReddit;"],"mappings":"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"},"metadata":{},"sourceType":"module"}