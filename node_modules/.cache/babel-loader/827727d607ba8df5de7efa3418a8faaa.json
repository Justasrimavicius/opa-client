{"ast":null,"code":"var _jsxFileName = \"/Users/justinas/Documents/repos/teamProject/web/frontend/src/Components/ScrapeTwitter.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ScrapeTwitter(props) {\n  _s();\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [wordCloud, activateWordCloud] = useState(false);\n  const [scrapeResults, setScrapeResults] = useState([]);\n  const textInputRef = useRef();\n  const resFreqRef = useRef();\n  const scrapeBtnRef = useRef();\n  let previousText = useRef('TEMPLATE MESSAGE');\n  function scrape() {\n    const text = textInputRef.current.value;\n    let freq = resFreqRef.current.value;\n    if (freq == '') freq = 100;\n    console.lg(freq);\n    if (freq != '' && isNaN(freq)) {\n      setError('Word quantity must be a number');\n      return;\n    }\n    if (text == previousText.current) {\n      setError('Type a different word/phrase');\n      return;\n    } else if (text == '') {\n      setError(`Input field can't be empty`);\n      return;\n    }\n    previousText.current = text;\n    setLoading(true);\n    let xhr = new XMLHttpRequest();\n    xhr.open('POST', 'http://localhost:8080/twitterScrapping', true);\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    xhr.send(JSON.stringify({\n      text: text,\n      freq: freq\n    }));\n    xhr.onload = () => {\n      console.log(xhr.responseText);\n      setLoading(false);\n      const response = xhr.responseText.slice(2, xhr.responseText.length - 4);\n      const temp_all = response.split('(');\n      const cleanerTemp = temp_all.map(res => {\n        return res.slice(0, res.indexOf(')'));\n      });\n      cleanerTemp.shift();\n      const temp_seperatedFrequancyAndWords = cleanerTemp.map(elem => {\n        return elem.split(',');\n      });\n      const final = temp_seperatedFrequancyAndWords.map(elem => {\n        return elem.map(innerElem => {\n          return innerElem.replaceAll(' ', '').replaceAll(`'`, '');\n        });\n      });\n      console.log(final);\n      setScrapeResults(final);\n    };\n  }\n  useEffect(() => {\n    if (error !== null) {\n      setTimeout(() => {\n        setError(null);\n      }, 2000);\n    }\n  }, [error]);\n  useEffect(() => {\n    if (loading == true) {\n      scrapeBtnRef.current.classList.add('button-disabled');\n    }\n    if (loading == false && scrapeBtnRef.current.classList.contains('button-disabled')) {\n      scrapeBtnRef.current.classList.remove('button-disabled');\n    }\n  }, [loading]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scrapeTwitter\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        fontSize: '2rem',\n        margin: '10px'\n      },\n      children: \"Twitter scrapping\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"errorMsg\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputs\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"main-text-input\",\n        placeholder: \"Your word\",\n        ref: textInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"main-text-input\",\n        placeholder: \"Word qty.\",\n        ref: resFreqRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Frequency\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-innerResults\",\n        children: scrapeResults.map((singleField, index) => {\n          if (isNaN(singleField[1])) return;\n          return /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"reddit-ul\",\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: singleField[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: singleField[1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          scrape();\n        },\n        ref: scrapeBtnRef,\n        children: loading == true ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lds-dual-ring\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 86\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            margin: '0'\n          },\n          children: \"Scrape\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 126\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Detailed view\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"goBack-btn\",\n      onClick: () => {\n        props.setWhatToScrape('');\n      },\n      children: \"Go back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n_s(ScrapeTwitter, \"A6XBRXPkkL5VluINIBSjNs9TWYw=\");\n_c = ScrapeTwitter;\nexport default ScrapeTwitter;\nvar _c;\n$RefreshReg$(_c, \"ScrapeTwitter\");","map":{"version":3,"names":["React","useEffect","useState","useRef","ScrapeTwitter","props","error","setError","loading","setLoading","wordCloud","activateWordCloud","scrapeResults","setScrapeResults","textInputRef","resFreqRef","scrapeBtnRef","previousText","scrape","text","current","value","freq","console","lg","isNaN","xhr","XMLHttpRequest","open","setRequestHeader","send","JSON","stringify","onload","log","responseText","response","slice","length","temp_all","split","cleanerTemp","map","res","indexOf","shift","temp_seperatedFrequancyAndWords","elem","final","innerElem","replaceAll","setTimeout","classList","add","contains","remove","fontSize","margin","singleField","index","setWhatToScrape"],"sources":["/Users/justinas/Documents/repos/teamProject/web/frontend/src/Components/ScrapeTwitter.jsx"],"sourcesContent":["import React from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useRef } from 'react';\n\nfunction ScrapeTwitter(props) {\n\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [wordCloud, activateWordCloud] = useState(false);\n\n    const [scrapeResults, setScrapeResults] = useState([]);\n\n    const textInputRef = useRef();\n    const resFreqRef = useRef();\n    const scrapeBtnRef = useRef();\n    let previousText = useRef('TEMPLATE MESSAGE');\n    function scrape(){\n        const text = textInputRef.current.value;\n        let freq = resFreqRef.current.value;\n        if(freq == '')freq = 100;\n        console.lg(freq)\n        if(freq != '' && isNaN(freq)){\n            setError('Word quantity must be a number')\n            return;\n        }\n        if(text==previousText.current){\n            setError('Type a different word/phrase');\n            return;\n        } else if(text==''){\n            setError(`Input field can't be empty`);\n            return;\n        }\n        previousText.current = text;\n        setLoading(true);\n\n        let xhr = new XMLHttpRequest();\n        xhr.open('POST','http://localhost:8080/twitterScrapping', true);\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(JSON.stringify({\n            text: text,\n            freq: freq\n        }));\n        xhr.onload = ()=>{\n            console.log(xhr.responseText)\n            setLoading(false);\n            const response = xhr.responseText.slice(2, xhr.responseText.length - 4);\n            const temp_all = response.split('(');\n            const cleanerTemp = temp_all.map(res => {\n                return res.slice(0, res.indexOf(')'))\n            })\n            cleanerTemp.shift();\n            const temp_seperatedFrequancyAndWords = cleanerTemp.map(elem=>{\n                return elem.split(',');\n            })\n\n            const final = temp_seperatedFrequancyAndWords.map(elem=>{\n                return elem.map(innerElem=>{\n                    return (innerElem.replaceAll(' ', '')).replaceAll(`'`,'');\n                })\n            })\n            console.log(final);\n            setScrapeResults(final);\n        }\n    }\n    \n    useEffect(()=>{\n        if(error!==null){\n            setTimeout(() => {\n                setError(null);\n            }, 2000);\n        }\n    },[error])\n\n    useEffect(()=>{\n        if(loading==true){\n            scrapeBtnRef.current.classList.add('button-disabled');\n        }\n        if(loading==false && scrapeBtnRef.current.classList.contains('button-disabled')){\n            scrapeBtnRef.current.classList.remove('button-disabled');\n        }\n    },[loading])\n\n    return (\n        <div className='scrapeTwitter'>\n            <h4 style={{fontSize:'2rem',margin:'10px'}}>Twitter scrapping</h4>\n            <p className='errorMsg'>{error}</p>\n            <div className='inputs'>\n                <input className='main-text-input' placeholder='Your word' ref={textInputRef}></input>\n                <input className='main-text-input' placeholder='Word qty.' ref={resFreqRef}></input>\n            </div>\n            <div className='input-results'>\n                    <ul>\n                        <li>Word</li>\n                        <li>Frequency</li>\n                    </ul>\n                <div className='input-innerResults'>\n                    {scrapeResults.map((singleField,index)=>{\n                        if(isNaN(singleField[1]))return;\n                        return(\n                            <ul className='reddit-ul' key={index}>\n                                <li>{singleField[0]}</li>\n                                <li>{singleField[1]}</li>\n                            </ul>\n                        )\n                    })}\n                </div>\n            </div>\n            <div className='input-buttons'>\n                <button onClick={()=>{scrape()}} ref={scrapeBtnRef}>{loading==true ? <div className=\"lds-dual-ring\"></div> : <p style={{margin:'0'}}>Scrape</p>}</button>\n                <button>Detailed view</button>\n            </div>\n            <button className='goBack-btn' onClick={()=>{props.setWhatToScrape('')}}>Go back</button>\n        </div>\n    );\n}\n\nexport default ScrapeTwitter;"],"mappings":"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"},"metadata":{},"sourceType":"module"}